# -*- coding: utf-8 -*-
"""maskdetector.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fLp45pnSCRIBeCcBOepuqfU3XxTldRD3
"""

# Импорты
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.preprocessing.image import img_to_array
from tensorflow.keras.preprocessing.image import load_img

from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input

from tensorflow.keras.layers import AveragePooling2D
from tensorflow.keras.layers import Dropout
from tensorflow.keras.layers import Flatten
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Input

from tensorflow.keras.models import Model
from tensorflow.keras.models import load_model

from tensorflow.keras.optimizers import Adam

from tensorflow.keras.utils import to_categorical

from sklearn.preprocessing import LabelBinarizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

import imutils.paths

import matplotlib.pyplot as plt
import numpy as np

import os
import cv2
import argparse

arg_parser = argparse.ArgumentParser()
arg_parser.add_argument("-d", "--dataset", type=str, default="dataset/train", help="Путь к датасету")
arg_parser.add_argument("-m", "--model", type=str, default="mask_model", help="Путь для сохранения модели")
arg_parser.add_argument("-p", "--plot", type=str, default="results-plot.png", help="Путь для сохранения графика обучения")

args = vars(arg_parser.parse_args())

# Путь к датасету
print("Загружаем изображения")

paths = list(imutils.paths.list_images(args['dataset']))
data = []
labels = []

for path in paths:
	# Загружаем изображение, сжимаем до 224*224
	image = load_img(path, target_size=(224, 224))
	image = img_to_array(image)
	image = preprocess_input(image)
	data.append(image)

	labels.append(path.split(os.path.sep)[-2])

without_mask = labels.count("nomask")
with_mask = labels.count("mask")
print("Загружено: без_маски=%d с_маской=%d" % (without_mask, with_mask))

data = np.array(data, dtype="float32")
labels = np.array(labels)

# Преобразумем лейблы в вектор [mask,nomask]
lb = LabelBinarizer()
binarized_labels = lb.fit_transform(labels)
binarized_labels = to_categorical(binarized_labels)

# Разбиваем датасет: 85% на обучение, 15% на тестирование
(trainX, testX, trainY, testY) = train_test_split(data, binarized_labels, test_size=0.15, stratify=binarized_labels)

# Настройка аугментации входных изображений
augmented_input = ImageDataGenerator(
	zoom_range=0.2,
	rotation_range=28,
	shear_range=0.23,
	horizontal_flip=True,
	vertical_flip=False,
	width_shift_range=0.22,
	height_shift_range=0.22
)

# Загрузка MobileNetV2 и её заморозка
mobileNetModel = MobileNetV2(weights="imagenet", include_top=False, input_shape=(224, 224, 3), input_tensor=Input(shape=(224, 224, 3)))

for l in mobileNetModel.layers:
  l.trainable = False

# Создание модели на базе выхода MobileNetV2
maskModel = mobileNetModel.output
maskModel = AveragePooling2D(pool_size=(7, 7))(maskModel)
maskModel = Flatten(name="flatten")(maskModel)
maskModel = Dense(128, activation="relu")(maskModel)
maskModel = Dropout(0.5)(maskModel)
maskModel = Dense(2, activation="softmax")(maskModel)

model = Model(inputs=mobileNetModel.input, outputs=maskModel)

epochs = 24
INIT_LR = 1e-4

adam = Adam(lr=INIT_LR, decay=INIT_LR / epochs)
model.compile(optimizer=adam, metrics=["accuracy"], loss="binary_crossentropy")

# Тренируем модель
batch_size = 60
results = model.fit(
	augmented_input.flow(trainX, trainY, batch_size = batch_size),
	steps_per_epoch=len(trainX) // batch_size,
	validation_data=(testX, testY),
	validation_steps=len(testX) // batch_size,
	epochs=epochs)

ypred = model.predict(testX, batch_size=batch_size)

print(classification_report(testY.argmax(axis=1), np.argmax(ypred, axis=1), target_names=lb.classes_))

print("Сохраняем модель на диск: %s" % args["model"])
model.save(args["model"], save_format="h5")

print("Сохраняем график на диск: %s" % args["plot"])
plt.figure()
plt.plot(np.arange(0, epochs), results.history["loss"], label="train loss")
plt.plot(np.arange(0, epochs), results.history["accuracy"], label="train accuracy")
plt.plot(np.arange(0, epochs), results.history["val_loss"], label="validation loss")
plt.plot(np.arange(0, epochs), results.history["val_accuracy"], label="validation accuracy")
plt.xlabel("Эпоха")
plt.legend()
plt.plot()
plt.savefig(args["plot"])